name: Continuous integration with formatting and testing checks

on: [push, pull_request]

# Set Environmental Variables
env:
  SNOWFLAKE_CONNECTIONS_DUMMY_ACCOUNT: ${{ secrets.TGT_ACCOUNT }}
  SNOWFLAKE_CONNECTIONS_DUMMY_USER: ${{ secrets.TGT_USER }}
  SNOWFLAKE_CONNECTIONS_DUMMY_PASSWORD: ${{ secrets.TGT_PASSWORD }}
  SNOWFLAKE_CONNECTIONS_DUMMY_DATABASE: "TEAM3_DB"
  SNOWFLAKE_CONNECTIONS_DUMMY_SCHEMA: "TEAM3_SCHEMA"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Snowflake CLI installation
    - uses: Snowflake-Labs/snowflake-cli-action@v1.5
      with:
        cli-version: "latest"
        default-config-file-path: "config.toml"

    # Use the CLI
    - name: Test version
      run: snow --version

    - name: Test Connection
      env:
        SNOWFLAKE_CONNECTIONS_DUMMY_ROLE: TEAM3_MASTER_ADMIN
        SNOWFLAKE_CONNECTIONS_DUMMY_WAREHOUSE: TEAM3_WH
        SNOWFLAKE_CONNECTIONS_DUMMY_DATABASE: ${{ env.SNOWFLAKE_CONNECTIONS_DUMMY_DATABASE }}
        SNOWFLAKE_CONNECTIONS_DUMMY_SCHEMA: ${{ env.SNOWFLAKE_CONNECTIONS_DUMMY_SCHEMA }}
      run: snow connection test --connection Dummy

    # Install dependencies
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    # Run tests with coverage
    - name: Run tests with coverage
      run: |
        pytest --cov=. tests/

    # Generate a coverage report in XML format
    - name: Run tests with coverage and generate XML report
      run: |
        pytest --cov=. tests/ --cov-report=xml tests/

    # Upload the coverage report
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    # Black - code formatting for python files
    - name: Run Black for code formatting
      run: |
        black .

    # Auto-sort imports with isort
    - name: Auto-sort imports with isort
      run: |
        isort .

    # Run sqlfluff to check and format SQL files
    - name: Run sqlfluff to format SQL files
      continue-on-error: true
      run: |
        sqlfluff fix --dialect snowflake --force --disable-noqa --vvvvv **/*.sql
        sqlfluff lint --dialect snowflake --vvvvv .

    # Commit changes to the current branch
    - name: Set up GitHub credentials
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

    - name: Check out the branch
      run: |
        git fetch origin ${{ github.ref_name }}  # Fetch the branch
        git checkout ${{ github.ref_name }}     # Switch to the branch

    - name: Commit changes
      run: |
        git add .  # Stage all changes
        git commit -m "Fix SQL issues with sqlfluff" || echo "No changes to commit"

    - name: Push changes to the current branch
      run: |
        git push origin ${{ github.ref_name }}  # Push changes back to the branch it's running from
