name: Continuous Deployment with Docker and Prometheus Monitoring

on:
  push:
    branches:
      - main

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_LOGIN_NAME: ${{ secrets.DOCKER_LOGIN_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Docker Login
    - name: Docker Login
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

    # Step 3: Clean Up Existing Containers
    - name: Clean Up Existing Containers
      run: |
        docker stop prometheus-container || true
        docker rm prometheus-container || true
        docker stop app-container || true
        docker rm app-container || true

    # Step 4: Build Docker Images
    - name: Build Application Docker Image
      run: docker build --rm --platform linux/amd64 -t app-container -f src/docker/Dockerfile .

    - name: Create Prometheus Configuration
      run: |
        cat <<EOF > prometheus.yml
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'application'
            static_configs:
              - targets: ['app-container:8000']  # Application metrics exposed on port 8000
        EOF

    # Step 5: Run Docker Containers
    - name: Create Docker Network
      run: docker network create custom-network || true

    - name: Run Application Container
      run: docker run --net custom-network -d --name app-container -p 8000:8000 app-container

    - name: Run Prometheus Container
      run: docker run --net custom-network -d --name prometheus-container -p 9092:9090 -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus

  monitor:
    runs-on: ubuntu-latest
    needs: deploy  # Run only after the deploy job completes

    steps:
    # Step 1: Test Prometheus Connection
    - name: Test Prometheus Connection
      run: |
        curl -s http://localhost:9092/api/v1/status/buildinfo || echo "Prometheus server not connected"

    # Step 2: Query Prometheus for Metrics
    - name: Query Metrics from Prometheus
      run: |
        QUERY_RESULT=$(curl -s "http://localhost:9092/api/v1/query?query=up")
        echo "Prometheus query result: $QUERY_RESULT"

    # Step 3: Validate Application Metrics
    - name: Validate Application Metrics
      run: |
        echo "Validating Prometheus metrics..."
        APP_UP=$(curl -s "http://localhost:9092/api/v1/query?query=my_app_up")
        if [ "$APP_UP" != "1" ]; then
          echo "Application is not running properly!"
          exit 1
        fi
        echo "Application metrics validated successfully."

